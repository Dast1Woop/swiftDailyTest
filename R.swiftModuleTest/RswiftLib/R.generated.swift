//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
public struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  public static func validate() throws {
    try intern.validate()
  }

  /// This `R.file` struct is generated, and contains static references to 8 files.
  public struct file {
    /// Resource file `aishi.jpg`.
    public static let aishiJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "aishi", pathExtension: "jpg")
    /// Resource file `appleIcon.jpg`.
    public static let appleIconJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "appleIcon", pathExtension: "jpg")
    /// Resource file `console.png`.
    public static let consolePng = Rswift.FileResource(bundle: R.hostingBundle, name: "console", pathExtension: "png")
    /// Resource file `foot.png`.
    public static let footPng = Rswift.FileResource(bundle: R.hostingBundle, name: "foot", pathExtension: "png")
    /// Resource file `ioserng.jpg`.
    public static let ioserngJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "ioserng", pathExtension: "jpg")
    /// Resource file `mmBig.png`.
    public static let mmBigPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mmBig", pathExtension: "png")
    /// Resource file `mmSmall.jpg`.
    public static let mmSmallJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "mmSmall", pathExtension: "jpg")
    /// Resource file `redPaint.png`.
    public static let redPaintPng = Rswift.FileResource(bundle: R.hostingBundle, name: "redPaint", pathExtension: "png")

    /// `bundle.url(forResource: "aishi", withExtension: "jpg")`
    public static func aishiJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aishiJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "appleIcon", withExtension: "jpg")`
    public static func appleIconJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.appleIconJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "console", withExtension: "png")`
    public static func consolePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.consolePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "foot", withExtension: "png")`
    public static func footPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.footPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ioserng", withExtension: "jpg")`
    public static func ioserngJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ioserngJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mmBig", withExtension: "png")`
    public static func mmBigPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mmBigPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mmSmall", withExtension: "jpg")`
    public static func mmSmallJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mmSmallJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "redPaint", withExtension: "png")`
    public static func redPaintPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.redPaintPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 17 images.
  public struct image {
    /// Image `aishi.jpg`.
    public static let aishiJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "aishi.jpg")
    /// Image `appleIcon.jpg`.
    public static let appleIconJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "appleIcon.jpg")
    /// Image `console`.
    public static let console = Rswift.ImageResource(bundle: R.hostingBundle, name: "console")
    /// Image `foot`.
    public static let foot = Rswift.ImageResource(bundle: R.hostingBundle, name: "foot")
    /// Image `img_02`.
    public static let img_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_02")
    /// Image `ioserng.jpg`.
    public static let ioserngJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ioserng.jpg")
    /// Image `mmBig`.
    public static let mmBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "mmBig")
    /// Image `mmSmall.jpg`.
    public static let mmSmallJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "mmSmall.jpg")
    /// Image `redPaint`.
    public static let redPaint = Rswift.ImageResource(bundle: R.hostingBundle, name: "redPaint")
    /// Image `tab_collection_selected`.
    public static let tab_collection_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_collection_selected")
    /// Image `tab_collection`.
    public static let tab_collection = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_collection")
    /// Image `tab_home_selected`.
    public static let tab_home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home_selected")
    /// Image `tab_home`.
    public static let tab_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home")
    /// Image `tab_more_selected`.
    public static let tab_more_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_more_selected")
    /// Image `tab_more`.
    public static let tab_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_more")
    /// Image `tab_ride1`.
    public static let tab_ride1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_ride1")
    /// Image `tab_ride_selected`.
    public static let tab_ride_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_ride_selected")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aishi.jpg", bundle: ..., traitCollection: ...)`
    public static func aishiJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aishiJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "appleIcon.jpg", bundle: ..., traitCollection: ...)`
    public static func appleIconJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appleIconJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "console", bundle: ..., traitCollection: ...)`
    public static func console(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.console, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "foot", bundle: ..., traitCollection: ...)`
    public static func foot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_02", bundle: ..., traitCollection: ...)`
    public static func img_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ioserng.jpg", bundle: ..., traitCollection: ...)`
    public static func ioserngJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ioserngJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mmBig", bundle: ..., traitCollection: ...)`
    public static func mmBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mmBig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mmSmall.jpg", bundle: ..., traitCollection: ...)`
    public static func mmSmallJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mmSmallJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "redPaint", bundle: ..., traitCollection: ...)`
    public static func redPaint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redPaint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_collection", bundle: ..., traitCollection: ...)`
    public static func tab_collection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_collection, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_collection_selected", bundle: ..., traitCollection: ...)`
    public static func tab_collection_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_collection_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_home", bundle: ..., traitCollection: ...)`
    public static func tab_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_home_selected", bundle: ..., traitCollection: ...)`
    public static func tab_home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_more", bundle: ..., traitCollection: ...)`
    public static func tab_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_more_selected", bundle: ..., traitCollection: ...)`
    public static func tab_more_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_more_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_ride1", bundle: ..., traitCollection: ...)`
    public static func tab_ride1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_ride1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_ride_selected", bundle: ..., traitCollection: ...)`
    public static func tab_ride_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_ride_selected, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

public struct _R {
  fileprivate init() {}
}
